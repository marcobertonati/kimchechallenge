{"version":3,"sources":["components/search.js","components/countries.by.continent.js","components/countries.by.lenguage.js","graphql/index.schema.js","containers/search.countries.js","App.js","serviceWorker.js","index.js"],"names":["Search","onHandleChange","for","className","name","id","type","onChange","CountriesByContinent","countries","map","continent","Row","toUpperCase","country","Col","CountriesByLenguage","lenguage","GET_COUNTRIES","gql","SearchCountries","useState","countriesByContinent","setCountriesByContinent","countriesByLenguage","setCountriesByLenguage","showGroup","setShowGroup","useQuery","loading","error","data","onHandleClick","event","target","value","Container","document","getElementById","filteredCountries","filter","toLowerCase","includes","countriesFilteredByContinent","reduce","acc","replace","push","arrCountriesByContinent","Object","entries","countriesFilteredByLenguage","languages","forEach","arrCountriesByLenguages","xs","md","Button","onClick","variant","length","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ebc9f3b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./search.css\";\r\n\r\nexport default function Search({ onHandleChange }) {\r\n  return (\r\n    <>\r\n      <h1>COUNTRY SEARCH</h1>\r\n      <div>\r\n        <div>\r\n          <label for=\"input-search-country\">Some random text:</label>\r\n        </div>\r\n        <div className=\"box-search\">\r\n          <span>üîé</span>\r\n          <span>\r\n            <input\r\n              name=\"input-search-country\"\r\n              id=\"input-search-country\"\r\n              type=\"text\"\r\n              onChange={onHandleChange}\r\n            />\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./countries.group.css\";\r\n\r\nexport default function CountriesByContinent({ countries }) {\r\n  return (\r\n    <>\r\n        {countries.map((continent) => {\r\n          return (\r\n            <>\r\n              <Row>\r\n                <h3>{continent[0].toUpperCase()} üó∫Ô∏è</h3>\r\n                {continent[1].map((country) => {\r\n                  return (\r\n                    <Col className=\"country-finded\">\r\n                      <p>{country.name}</p>\r\n                    </Col>\r\n                  );\r\n                })}\r\n              </Row>\r\n              <br></br>\r\n            </>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./countries.group.css\";\r\n\r\nexport default function CountriesByLenguage({ countries }) {\r\n  return (\r\n    <>\r\n        {countries.map((lenguage) => {\r\n          return (\r\n            <>\r\n              <Row>\r\n                <h3>{lenguage[0].toUpperCase()} üí¨</h3>\r\n                {lenguage[1].map((country) => {\r\n                  return (\r\n                    <Col className=\"country-finded\">\r\n                      <p>{country.name}</p>\r\n                    </Col>\r\n                  );\r\n                })}\r\n              </Row>\r\n              <br></br>\r\n            </>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n}\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_COUNTRIES = gql`\r\n  query Countries {\r\n    countries {\r\n      name\r\n      continent {\r\n        name\r\n      }\r\n      languages {\r\n        name\r\n      }\r\n      emoji\r\n      emojiU\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n/* Components */\r\nimport Search from \"../components/search\";\r\nimport CountriesByContinent from \"../components/countries.by.continent\";\r\nimport CountriesByLenguage from \"../components/countries.by.lenguage\";\r\n\r\n/* Boostrap css */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./search.container.css\";\r\n\r\n/* Bootstrap components */\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\n/* Apollo modules */\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\n\r\n/* Graphql Query */\r\nimport { GET_COUNTRIES } from \"../graphql/index.schema\";\r\n\r\nexport default function SearchCountries() {\r\n  /* Countries by continent & lenguages */\r\n  const [countriesByContinent, setCountriesByContinent] = useState([]);\r\n  const [countriesByLenguage, setCountriesByLenguage] = useState([]);\r\n\r\n  /* Set the component showed by clicking buttons */\r\n  const [showGroup, setShowGroup] = useState(\"0\");\r\n\r\n  /* Graphql Query */\r\n  const { loading, error, data } = useQuery(GET_COUNTRIES);\r\n\r\n  /* This function take the value of input and set states */\r\n  function onHandleChange() {\r\n    /* Take the value of the input a filter countriets that contain the characters of input */\r\n    const value = document.getElementById(\"input-search-country\").value;\r\n    const filteredCountries = data.countries.filter((country) =>\r\n      country.name.toLowerCase().includes(value.toLowerCase())\r\n    );\r\n\r\n    /* COUNTRIES BY CONTINENT */\r\n    const countriesFilteredByContinent = filteredCountries.reduce(\r\n      (acc, country) => {\r\n        const continent = country.continent.name\r\n          .toLowerCase()\r\n          .replace(/ /g, \"\");\r\n        if (!acc[continent]) {\r\n          acc[continent] = [];\r\n          acc[continent].push(country);\r\n        } else {\r\n          acc[continent].push(country);\r\n        }\r\n        return acc;\r\n      },\r\n      {} // Initial value with a empty object\r\n    );\r\n\r\n    const arrCountriesByContinent = Object.entries(\r\n      countriesFilteredByContinent\r\n    );\r\n    setCountriesByContinent(arrCountriesByContinent);\r\n\r\n    /* COUNTRIES BY LENGUAGE */\r\n    const countriesFilteredByLenguage = filteredCountries.reduce(\r\n      (acc, country) => {\r\n        const lenguages = country.languages;\r\n        lenguages.forEach((lenguage) => {\r\n          if (!acc[lenguage.name]) {\r\n            acc[lenguage.name] = [];\r\n            acc[lenguage.name].push(country);\r\n          } else {\r\n            acc[lenguage.name].push(country);\r\n          }\r\n        });\r\n        return acc;\r\n      },\r\n      {} // Initial value with a empty object\r\n    );\r\n\r\n    const arrCountriesByLenguages = Object.entries(countriesFilteredByLenguage);\r\n    setCountriesByLenguage(arrCountriesByLenguages);\r\n  }\r\n\r\n  /*Function that set the group to show */\r\n  function onHandleClick(event) {\r\n    setShowGroup(event.target.value);\r\n  }\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return (\r\n    <Container className=\"search-container\">\r\n      <Row className=\"search-container-box\">\r\n        <Col>\r\n          <Search onHandleChange={onHandleChange} />\r\n          <Row className=\"group-by\">\r\n            <Col xs=\"4\" md=\"2\">\r\n              <h4>Group by: </h4>\r\n            </Col>\r\n            <Col xs=\"4\" md=\"5\">\r\n              <Button\r\n                id=\"btn-continent\"\r\n                onClick={onHandleClick}\r\n                value=\"0\"\r\n                variant=\"outline-light\"\r\n              >\r\n                by Continent{\" \"}\r\n                {countriesByContinent.length === 0 ? (\r\n                  \"\"\r\n                ) : (\r\n                  <span> : {countriesByContinent.length}</span>\r\n                )}\r\n              </Button>\r\n            </Col>\r\n            <Col xs=\"4\" md=\"5\">\r\n              <Button\r\n                id=\"btn-lenguage\"\r\n                onClick={onHandleClick}\r\n                value=\"1\"\r\n                variant=\"outline-light\"\r\n              >\r\n                by Lenguage{\" \"}\r\n                {countriesByLenguage.length === 0 ? (\r\n                  \"\"\r\n                ) : (\r\n                  <span> : {countriesByLenguage.length}</span>\r\n                )}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"search-container-box\">\r\n        <Col>\r\n          {showGroup === \"0\" ? (\r\n            <CountriesByContinent countries={countriesByContinent} />\r\n          ) : (\r\n            <CountriesByLenguage countries={countriesByLenguage} />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\n/* Modules */\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\n/* Containers */\nimport SearchCountries from \"./containers/search.countries\";\n\n/*------------------*/\n\n// Apollo Client\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <SearchCountries />\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}